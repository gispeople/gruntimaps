<!--

Copyright 2016, 2017, 2018 GIS People Pty Ltd

This file is part of GruntiMaps.

GruntiMaps is free software: you can redistribute it and/or modify it under
the terms of the GNU Affero General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option) any
later version.

GruntiMaps is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
details.

You should have received a copy of the GNU Affero General Public License along
with GruntiMaps.  If not, see <https://www.gnu.org/licenses/>.

 -->
@{
    ViewData["Title"] = "Map Server Information";
}

@using System.IO
@using GruntiMaps.Api.Common.Configuration
@using GruntiMaps.Api.Common.Enums
@using Microsoft.Extensions.Options
@model GruntiMaps.WebAPI.Interfaces.IMapData
@inject IOptions<PathOptions> PathOptions
@inject IOptions<ServiceOptions> ServiceOptions
@inject IOptions<ProviderOptions> ProviderOptions
@inject IOptions<ContainerOptions> ContainerOptions

@section scripts {
    <script src="/js/info.js"></script>
}
<style type="text/css">
    .validate {
        display: inherit;
    }
</style>

<h2>@ViewData["Title"].</h2>
<environment names="Development">
    <h3>Directories:</h3>
    <p>Root directory = @PathOptions.Value.Root, containing @Directory.GetDirectories(PathOptions.Value.Root).Length directories</p>
    <p>Pack directory = @PathOptions.Value.Packs, containing @Directory.GetFiles(PathOptions.Value.Packs).Length files</p>
    <p>Style directory = @PathOptions.Value.Styles, containing @Directory.GetFiles(PathOptions.Value.Styles).Length files</p>
    <p>Tile directory = @PathOptions.Value.Tiles, containing @Directory.GetFiles(PathOptions.Value.Tiles).Length files</p>
    <p>Font directory = @PathOptions.Value.Fonts, containing @Directory.GetDirectories(PathOptions.Value.Fonts).Length fonts</p>
</environment>
<h3>Data Available:</h3>
<p>Font List: <a asp-controller="RestApi" asp-action="GetFonts">Retrieve Font List JSON</a></p>

<p>
    There
    @if (Model.AllActiveLayers.Length == 1)
    {
        @("is")
    }
    else
    {
        @("are")
    }
    @Model.AllActiveLayers.Length open vector tile layers:
</p>
<div class="container">
    @foreach (var c in Model.AllActiveLayers)
    {
        <div class="row">
            <div class="col-sm-4">@c.Source.Description</div>

            <div class="col-sm-1"><a asp-route-name="GetLayerSource" asp-route-id="@c.Id">Source</a></div>
            <div class="col-sm-1"><a asp-route-name="GetLayerStyle" asp-route-id="@c.Id">Style</a></div>
            <div class="col-sm-1"><a asp-route-name="GetLayerMetaData" asp-route-id="@c.Id">Data</a></div>
            <div class="col-sm-5"><a class="validate" id="@c.Id">Validate</a></div>
        </div>
    }
</div>
<h3>Configuration:</h3>
<p>Layers are checked every @ServiceOptions.Value.LayerRefresh ms.</p>
<p>The conversion queue is checked every @ServiceOptions.Value.ConvertPolling ms.</p>
<p>The external host is @ViewContext.HttpContext.Request.Host</p>
<p>This is a @Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") environment.</p>
@if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("host")))
{
    <p> This page was served from @Environment.GetEnvironmentVariable("host").</p>
}

<environment names="Development">
    @switch (ProviderOptions.Value.Type)
    {
        case ProviderType.Local:
            <p>Local storage provider, path = @ProviderOptions.Value.Local.Path</p>
            break;
        case ProviderType.Azure:
            <p>Azure storage provider, map data is being obtained from connection string: <b>@ProviderOptions.Value.Azure.ConnectionString</b></p>
            break;
    }
    <h3>Storage Containers</h3>
    <p>fonts: @ContainerOptions.Value.Fonts</p>
    <p>geojson: @ContainerOptions.Value.Geojsons</p>
    <p>mbtiles: @ContainerOptions.Value.MbTiles</p>
    <p>packs: @ContainerOptions.Value.Packs</p>
    <p>overlay: @ContainerOptions.Value.Overlays</p>
    <p>styles: @ContainerOptions.Value.Styles</p>
    <h3>Environment:</h3>
    <ul>
        @foreach (System.Collections.DictionaryEntry e in Environment.GetEnvironmentVariables())
        {
            <li>@e.Key = @e.Value</li>
        }
    </ul>
    <h3>Headers:</h3>
    <ul>
        @foreach (var h in ViewContext.HttpContext.Request.Headers)
        {
            <li>@h.Key = @h.Value</li>
        }
    </ul>
</environment>